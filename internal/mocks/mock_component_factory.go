// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// ComponentFactory is an autogenerated mock type for the ComponentFactory type
type ComponentFactory struct {
	mock.Mock
}

// CreateDependencyResolver provides a mock function with given fields: config
func (_m *ComponentFactory) CreateDependencyResolver(config interfaces.DependencyResolverConfig) (interfaces.DependencyResolver, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateDependencyResolver")
	}

	var r0 interfaces.DependencyResolver
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.DependencyResolverConfig) (interfaces.DependencyResolver, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(interfaces.DependencyResolverConfig) interfaces.DependencyResolver); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.DependencyResolver)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.DependencyResolverConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInterpolationResolver provides a mock function with given fields: config
func (_m *ComponentFactory) CreateInterpolationResolver(config interfaces.InterpolationResolverConfig) (interfaces.InterpolationResolver, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateInterpolationResolver")
	}

	var r0 interfaces.InterpolationResolver
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.InterpolationResolverConfig) (interfaces.InterpolationResolver, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(interfaces.InterpolationResolverConfig) interfaces.InterpolationResolver); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.InterpolationResolver)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.InterpolationResolverConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProviderLifecycleManager provides a mock function with given fields: config
func (_m *ComponentFactory) CreateProviderLifecycleManager(config interfaces.ProviderManagerConfig) (interfaces.ProviderLifecycleManager, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateProviderLifecycleManager")
	}

	var r0 interfaces.ProviderLifecycleManager
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.ProviderManagerConfig) (interfaces.ProviderLifecycleManager, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(interfaces.ProviderManagerConfig) interfaces.ProviderLifecycleManager); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ProviderLifecycleManager)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.ProviderManagerConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProviderMonitor provides a mock function with given fields: config
func (_m *ComponentFactory) CreateProviderMonitor(config interfaces.ProviderManagerConfig) (interfaces.ProviderMonitor, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateProviderMonitor")
	}

	var r0 interfaces.ProviderMonitor
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.ProviderManagerConfig) (interfaces.ProviderMonitor, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(interfaces.ProviderManagerConfig) interfaces.ProviderMonitor); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ProviderMonitor)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.ProviderManagerConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStateStore provides a mock function with given fields: config
func (_m *ComponentFactory) CreateStateStore(config interfaces.StateStoreConfig) (interfaces.StateStore, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateStateStore")
	}

	var r0 interfaces.StateStore
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.StateStoreConfig) (interfaces.StateStore, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(interfaces.StateStoreConfig) interfaces.StateStore); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.StateStore)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.StateStoreConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkerPool provides a mock function with given fields: config
func (_m *ComponentFactory) CreateWorkerPool(config interfaces.PoolConfig) (interfaces.Pool, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkerPool")
	}

	var r0 interfaces.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.PoolConfig) (interfaces.Pool, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(interfaces.PoolConfig) interfaces.Pool); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Pool)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.PoolConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComponentFactory creates a new instance of ComponentFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentFactory {
	mock := &ComponentFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

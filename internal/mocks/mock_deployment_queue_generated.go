// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// DeploymentQueue is an autogenerated mock type for the DeploymentQueue type
type DeploymentQueue struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: ctx, deploymentID
func (_m *DeploymentQueue) Cancel(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enqueue provides a mock function with given fields: ctx, deployment
func (_m *DeploymentQueue) Enqueue(ctx context.Context, deployment *interfaces.QueuedDeployment) error {
	ret := _m.Called(ctx, deployment)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *interfaces.QueuedDeployment) error); ok {
		r0 = rf(ctx, deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMetrics provides a mock function with no fields
func (_m *DeploymentQueue) GetMetrics() interfaces.QueueMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 interfaces.QueueMetrics
	if rf, ok := ret.Get(0).(func() interfaces.QueueMetrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.QueueMetrics)
	}

	return r0
}

// NewDeploymentQueue creates a new instance of DeploymentQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentQueue {
	mock := &DeploymentQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

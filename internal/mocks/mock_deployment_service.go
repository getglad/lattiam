// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// DeploymentService is an autogenerated mock type for the DeploymentService type
type DeploymentService struct {
	mock.Mock
}

// CancelDeployment provides a mock function with given fields: deploymentID
func (_m *DeploymentService) CancelDeployment(deploymentID string) error {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for CancelDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDeployment provides a mock function with given fields: request
func (_m *DeploymentService) CreateDeployment(request *interfaces.DeploymentRequest) (*interfaces.QueuedDeployment, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *interfaces.QueuedDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(*interfaces.DeploymentRequest) (*interfaces.QueuedDeployment, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*interfaces.DeploymentRequest) *interfaces.QueuedDeployment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.QueuedDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(*interfaces.DeploymentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: deploymentID
func (_m *DeploymentService) DeleteDeployment(deploymentID string) error {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeploymentNeedsDestruction provides a mock function with given fields: deploymentID
func (_m *DeploymentService) DeploymentNeedsDestruction(deploymentID string) (bool, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for DeploymentNeedsDestruction")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(deploymentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateUpdatePlan provides a mock function with given fields: deploymentID, newTerraformJSON
func (_m *DeploymentService) GenerateUpdatePlan(deploymentID string, newTerraformJSON map[string]interface{}) (*interfaces.UpdatePlan, error) {
	ret := _m.Called(deploymentID, newTerraformJSON)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUpdatePlan")
	}

	var r0 *interfaces.UpdatePlan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (*interfaces.UpdatePlan, error)); ok {
		return rf(deploymentID, newTerraformJSON)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) *interfaces.UpdatePlan); ok {
		r0 = rf(deploymentID, newTerraformJSON)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.UpdatePlan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(deploymentID, newTerraformJSON)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentByID provides a mock function with given fields: deploymentID
func (_m *DeploymentService) GetDeploymentByID(deploymentID string) (*interfaces.QueuedDeployment, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentByID")
	}

	var r0 *interfaces.QueuedDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*interfaces.QueuedDeployment, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) *interfaces.QueuedDeployment); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.QueuedDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentState provides a mock function with given fields: deploymentID
func (_m *DeploymentService) GetDeploymentState(deploymentID string) (map[string]interface{}, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentState")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentStatus provides a mock function with given fields: deploymentID
func (_m *DeploymentService) GetDeploymentStatus(deploymentID string) (*interfaces.DeploymentStatus, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentStatus")
	}

	var r0 *interfaces.DeploymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*interfaces.DeploymentStatus, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) *interfaces.DeploymentStatus); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.DeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueMetrics provides a mock function with no fields
func (_m *DeploymentService) GetQueueMetrics() interfaces.QueueMetrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQueueMetrics")
	}

	var r0 interfaces.QueueMetrics
	if rf, ok := ret.Get(0).(func() interfaces.QueueMetrics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.QueueMetrics)
	}

	return r0
}

// ListDeployments provides a mock function with given fields: filter
func (_m *DeploymentService) ListDeployments(filter interfaces.DeploymentFilter) ([]*interfaces.QueuedDeployment, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 []*interfaces.QueuedDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.DeploymentFilter) ([]*interfaces.QueuedDeployment, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(interfaces.DeploymentFilter) []*interfaces.QueuedDeployment); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.QueuedDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.DeploymentFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: deploymentID, request
func (_m *DeploymentService) UpdateDeployment(deploymentID string, request *interfaces.UpdateRequest) (*interfaces.QueuedUpdate, error) {
	ret := _m.Called(deploymentID, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployment")
	}

	var r0 *interfaces.QueuedUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *interfaces.UpdateRequest) (*interfaces.QueuedUpdate, error)); ok {
		return rf(deploymentID, request)
	}
	if rf, ok := ret.Get(0).(func(string, *interfaces.UpdateRequest) *interfaces.QueuedUpdate); ok {
		r0 = rf(deploymentID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.QueuedUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *interfaces.UpdateRequest) error); ok {
		r1 = rf(deploymentID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeploymentService creates a new instance of DeploymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentService {
	mock := &DeploymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

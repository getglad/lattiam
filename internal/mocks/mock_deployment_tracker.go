// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// DeploymentTracker is an autogenerated mock type for the DeploymentTracker type
type DeploymentTracker struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: deploymentID
func (_m *DeploymentTracker) GetByID(deploymentID string) (*interfaces.QueuedDeployment, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *interfaces.QueuedDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*interfaces.QueuedDeployment, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) *interfaces.QueuedDeployment); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.QueuedDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResult provides a mock function with given fields: deploymentID
func (_m *DeploymentTracker) GetResult(deploymentID string) (*interfaces.DeploymentResult, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 *interfaces.DeploymentResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*interfaces.DeploymentResult, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) *interfaces.DeploymentResult); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.DeploymentResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: deploymentID
func (_m *DeploymentTracker) GetStatus(deploymentID string) (*interfaces.DeploymentStatus, error) {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *interfaces.DeploymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*interfaces.DeploymentStatus, error)); ok {
		return rf(deploymentID)
	}
	if rf, ok := ret.Get(0).(func(string) *interfaces.DeploymentStatus); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.DeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter
func (_m *DeploymentTracker) List(filter interfaces.DeploymentFilter) ([]*interfaces.QueuedDeployment, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*interfaces.QueuedDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.DeploymentFilter) ([]*interfaces.QueuedDeployment, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(interfaces.DeploymentFilter) []*interfaces.QueuedDeployment); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.QueuedDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.DeploymentFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields: stateStore
func (_m *DeploymentTracker) Load(stateStore interfaces.StateStore) error {
	ret := _m.Called(stateStore)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.StateStore) error); ok {
		r0 = rf(stateStore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: deployment
func (_m *DeploymentTracker) Register(deployment *interfaces.QueuedDeployment) error {
	ret := _m.Called(deployment)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*interfaces.QueuedDeployment) error); ok {
		r0 = rf(deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: deploymentID
func (_m *DeploymentTracker) Remove(deploymentID string) error {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResult provides a mock function with given fields: deploymentID, result
func (_m *DeploymentTracker) SetResult(deploymentID string, result *interfaces.DeploymentResult) error {
	ret := _m.Called(deploymentID, result)

	if len(ret) == 0 {
		panic("no return value specified for SetResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *interfaces.DeploymentResult) error); ok {
		r0 = rf(deploymentID, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatus provides a mock function with given fields: deploymentID, status
func (_m *DeploymentTracker) SetStatus(deploymentID string, status interfaces.DeploymentStatus) error {
	ret := _m.Called(deploymentID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interfaces.DeploymentStatus) error); ok {
		r0 = rf(deploymentID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeploymentTracker creates a new instance of DeploymentTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentTracker {
	mock := &DeploymentTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

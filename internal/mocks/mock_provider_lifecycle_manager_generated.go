// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// ProviderLifecycleManager is an autogenerated mock type for the ProviderLifecycleManager type
type ProviderLifecycleManager struct {
	mock.Mock
}

// GetProvider provides a mock function with given fields: ctx, deploymentID, name, version, config, resourceType
func (_m *ProviderLifecycleManager) GetProvider(ctx context.Context, deploymentID string, name string, version string, config interfaces.ProviderConfig, resourceType string) (interfaces.UnifiedProvider, error) {
	ret := _m.Called(ctx, deploymentID, name, version, config, resourceType)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 interfaces.UnifiedProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interfaces.ProviderConfig, string) (interfaces.UnifiedProvider, error)); ok {
		return rf(ctx, deploymentID, name, version, config, resourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interfaces.ProviderConfig, string) interfaces.UnifiedProvider); ok {
		r0 = rf(ctx, deploymentID, name, version, config, resourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.UnifiedProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, interfaces.ProviderConfig, string) error); ok {
		r1 = rf(ctx, deploymentID, name, version, config, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProvider provides a mock function with given fields: deploymentID, name
func (_m *ProviderLifecycleManager) ReleaseProvider(deploymentID string, name string) error {
	ret := _m.Called(deploymentID, name)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(deploymentID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShutdownDeployment provides a mock function with given fields: deploymentID
func (_m *ProviderLifecycleManager) ShutdownDeployment(deploymentID string) error {
	ret := _m.Called(deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProviderLifecycleManager creates a new instance of ProviderLifecycleManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderLifecycleManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderLifecycleManager {
	mock := &ProviderLifecycleManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

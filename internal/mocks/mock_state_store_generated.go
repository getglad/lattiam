// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// StateStore is an autogenerated mock type for the StateStore type
type StateStore struct {
	mock.Mock
}

// CreateDeployment provides a mock function with given fields: ctx, deployment
func (_m *StateStore) CreateDeployment(ctx context.Context, deployment *interfaces.DeploymentMetadata) error {
	ret := _m.Called(ctx, deployment)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *interfaces.DeploymentMetadata) error); ok {
		r0 = rf(ctx, deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *StateStore) DeleteDeployment(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTerraformState provides a mock function with given fields: ctx, deploymentID
func (_m *StateStore) DeleteTerraformState(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTerraformState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *StateStore) GetDeployment(ctx context.Context, deploymentID string) (*interfaces.DeploymentMetadata, error) {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *interfaces.DeploymentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*interfaces.DeploymentMetadata, error)); ok {
		return rf(ctx, deploymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *interfaces.DeploymentMetadata); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.DeploymentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx
func (_m *StateStore) ListDeployments(ctx context.Context) ([]*interfaces.DeploymentMetadata, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 []*interfaces.DeploymentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*interfaces.DeploymentMetadata, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*interfaces.DeploymentMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.DeploymentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadTerraformState provides a mock function with given fields: ctx, deploymentID
func (_m *StateStore) LoadTerraformState(ctx context.Context, deploymentID string) ([]byte, error) {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for LoadTerraformState")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, deploymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *StateStore) LockDeployment(ctx context.Context, deploymentID string) (interfaces.StateLock, error) {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for LockDeployment")
	}

	var r0 interfaces.StateLock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interfaces.StateLock, error)); ok {
		return rf(ctx, deploymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interfaces.StateLock); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.StateLock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *StateStore) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTerraformState provides a mock function with given fields: ctx, deploymentID, stateData
func (_m *StateStore) SaveTerraformState(ctx context.Context, deploymentID string, stateData []byte) error {
	ret := _m.Called(ctx, deploymentID, stateData)

	if len(ret) == 0 {
		panic("no return value specified for SaveTerraformState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, deploymentID, stateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockDeployment provides a mock function with given fields: ctx, lock
func (_m *StateStore) UnlockDeployment(ctx context.Context, lock interfaces.StateLock) error {
	ret := _m.Called(ctx, lock)

	if len(ret) == 0 {
		panic("no return value specified for UnlockDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.StateLock) error); ok {
		r0 = rf(ctx, lock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeploymentStatus provides a mock function with given fields: ctx, deploymentID, status
func (_m *StateStore) UpdateDeploymentStatus(ctx context.Context, deploymentID string, status interfaces.DeploymentStatus) error {
	ret := _m.Called(ctx, deploymentID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interfaces.DeploymentStatus) error); ok {
		r0 = rf(ctx, deploymentID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStateStore creates a new instance of StateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateStore {
	mock := &StateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	interfaces "github.com/lattiam/lattiam/internal/interfaces"
)

// UnifiedProvider is an autogenerated mock type for the UnifiedProvider type
type UnifiedProvider struct {
	mock.Mock
}

// ApplyResourceChange provides a mock function with given fields: ctx, resourceType, plan
func (_m *UnifiedProvider) ApplyResourceChange(ctx context.Context, resourceType string, plan *interfaces.ResourcePlan) (map[string]interface{}, error) {
	ret := _m.Called(ctx, resourceType, plan)

	if len(ret) == 0 {
		panic("no return value specified for ApplyResourceChange")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *interfaces.ResourcePlan) (map[string]interface{}, error)); ok {
		return rf(ctx, resourceType, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *interfaces.ResourcePlan) map[string]interface{}); ok {
		r0 = rf(ctx, resourceType, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *interfaces.ResourcePlan) error); ok {
		r1 = rf(ctx, resourceType, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with no fields
func (_m *UnifiedProvider) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Configure provides a mock function with given fields: ctx, config
func (_m *UnifiedProvider) Configure(ctx context.Context, config map[string]interface{}) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateResource provides a mock function with given fields: ctx, resourceType, properties
func (_m *UnifiedProvider) CreateResource(ctx context.Context, resourceType string, properties map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, resourceType, properties)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(ctx, resourceType, properties)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, resourceType, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, resourceType, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, resourceType, currentState
func (_m *UnifiedProvider) DeleteResource(ctx context.Context, resourceType string, currentState map[string]interface{}) error {
	ret := _m.Called(ctx, resourceType, currentState)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, resourceType, currentState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlanResourceChange provides a mock function with given fields: ctx, resourceType, currentState, proposedState
func (_m *UnifiedProvider) PlanResourceChange(ctx context.Context, resourceType string, currentState map[string]interface{}, proposedState map[string]interface{}) (*interfaces.ResourcePlan, error) {
	ret := _m.Called(ctx, resourceType, currentState, proposedState)

	if len(ret) == 0 {
		panic("no return value specified for PlanResourceChange")
	}

	var r0 *interfaces.ResourcePlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, map[string]interface{}) (*interfaces.ResourcePlan, error)); ok {
		return rf(ctx, resourceType, currentState, proposedState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, map[string]interface{}) *interfaces.ResourcePlan); ok {
		r0 = rf(ctx, resourceType, currentState, proposedState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ResourcePlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, map[string]interface{}) error); ok {
		r1 = rf(ctx, resourceType, currentState, proposedState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDataSource provides a mock function with given fields: ctx, dataSourceType, config
func (_m *UnifiedProvider) ReadDataSource(ctx context.Context, dataSourceType string, config map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, dataSourceType, config)

	if len(ret) == 0 {
		panic("no return value specified for ReadDataSource")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(ctx, dataSourceType, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, dataSourceType, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, dataSourceType, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadResource provides a mock function with given fields: ctx, resourceType, properties
func (_m *UnifiedProvider) ReadResource(ctx context.Context, resourceType string, properties map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, resourceType, properties)

	if len(ret) == 0 {
		panic("no return value specified for ReadResource")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(ctx, resourceType, properties)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, resourceType, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, resourceType, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: ctx, resourceType, properties, currentState
func (_m *UnifiedProvider) UpdateResource(ctx context.Context, resourceType string, properties map[string]interface{}, currentState map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, resourceType, properties, currentState)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(ctx, resourceType, properties, currentState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, resourceType, properties, currentState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, map[string]interface{}) error); ok {
		r1 = rf(ctx, resourceType, properties, currentState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUnifiedProvider creates a new instance of UnifiedProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnifiedProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnifiedProvider {
	mock := &UnifiedProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
